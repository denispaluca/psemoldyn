// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "molsimInput-pskel.hxx"

// double_vector_pskel
//

void double_vector_pskel::
x_parser (::xml_schema::string_pskel& p)
{
  this->x_parser_ = &p;
}

void double_vector_pskel::
y_parser (::xml_schema::string_pskel& p)
{
  this->y_parser_ = &p;
}

void double_vector_pskel::
z_parser (::xml_schema::string_pskel& p)
{
  this->z_parser_ = &p;
}

void double_vector_pskel::
parsers (::xml_schema::string_pskel& x,
         ::xml_schema::string_pskel& y,
         ::xml_schema::string_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

double_vector_pskel::
double_vector_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0)
{
}

// integer_vector_pskel
//

void integer_vector_pskel::
x_parser (::xml_schema::string_pskel& p)
{
  this->x_parser_ = &p;
}

void integer_vector_pskel::
y_parser (::xml_schema::string_pskel& p)
{
  this->y_parser_ = &p;
}

void integer_vector_pskel::
z_parser (::xml_schema::string_pskel& p)
{
  this->z_parser_ = &p;
}

void integer_vector_pskel::
parsers (::xml_schema::string_pskel& x,
         ::xml_schema::string_pskel& y,
         ::xml_schema::string_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

integer_vector_pskel::
integer_vector_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0)
{
}

// cuboid_pskel
//

void cuboid_pskel::
coordinates_parser (::double_vector_pskel& p)
{
  this->coordinates_parser_ = &p;
}

void cuboid_pskel::
particles_per_dimension_parser (::integer_vector_pskel& p)
{
  this->particles_per_dimension_parser_ = &p;
}

void cuboid_pskel::
distance_particles_parser (::xml_schema::string_pskel& p)
{
  this->distance_particles_parser_ = &p;
}

void cuboid_pskel::
mass_parser (::xml_schema::string_pskel& p)
{
  this->mass_parser_ = &p;
}

void cuboid_pskel::
velocity_parser (::double_vector_pskel& p)
{
  this->velocity_parser_ = &p;
}

void cuboid_pskel::
parsers (::double_vector_pskel& coordinates,
         ::integer_vector_pskel& particles_per_dimension,
         ::xml_schema::string_pskel& distance_particles,
         ::xml_schema::string_pskel& mass,
         ::double_vector_pskel& velocity)
{
  this->coordinates_parser_ = &coordinates;
  this->particles_per_dimension_parser_ = &particles_per_dimension;
  this->distance_particles_parser_ = &distance_particles;
  this->mass_parser_ = &mass;
  this->velocity_parser_ = &velocity;
}

cuboid_pskel::
cuboid_pskel ()
: coordinates_parser_ (0),
  particles_per_dimension_parser_ (0),
  distance_particles_parser_ (0),
  mass_parser_ (0),
  velocity_parser_ (0)
{
}

// cuboid_cluster_pskel
//

void cuboid_cluster_pskel::
cuboid_parser (::cuboid_pskel& p)
{
  this->cuboid_parser_ = &p;
}

void cuboid_cluster_pskel::
parsers (::cuboid_pskel& cuboid)
{
  this->cuboid_parser_ = &cuboid;
}

cuboid_cluster_pskel::
cuboid_cluster_pskel ()
: cuboid_parser_ (0)
{
}

// particle_pskel
//

void particle_pskel::
coordinates_parser (::double_vector_pskel& p)
{
  this->coordinates_parser_ = &p;
}

void particle_pskel::
velocity_parser (::double_vector_pskel& p)
{
  this->velocity_parser_ = &p;
}

void particle_pskel::
mass_parser (::xml_schema::string_pskel& p)
{
  this->mass_parser_ = &p;
}

void particle_pskel::
parsers (::double_vector_pskel& coordinates,
         ::double_vector_pskel& velocity,
         ::xml_schema::string_pskel& mass)
{
  this->coordinates_parser_ = &coordinates;
  this->velocity_parser_ = &velocity;
  this->mass_parser_ = &mass;
}

particle_pskel::
particle_pskel ()
: coordinates_parser_ (0),
  velocity_parser_ (0),
  mass_parser_ (0)
{
}

// particle_cluster_pskel
//

void particle_cluster_pskel::
particle_parser (::particle_pskel& p)
{
  this->particle_parser_ = &p;
}

void particle_cluster_pskel::
parsers (::particle_pskel& particle)
{
  this->particle_parser_ = &particle;
}

particle_cluster_pskel::
particle_cluster_pskel ()
: particle_parser_ (0)
{
}

// input_particles_pskel
//

void input_particles_pskel::
particle_file_parser (::xml_schema::string_pskel& p)
{
  this->particle_file_parser_ = &p;
}

void input_particles_pskel::
cuboids_file_parser (::xml_schema::string_pskel& p)
{
  this->cuboids_file_parser_ = &p;
}

void input_particles_pskel::
cuboids_parser (::cuboid_cluster_pskel& p)
{
  this->cuboids_parser_ = &p;
}

void input_particles_pskel::
particles_parser (::particle_cluster_pskel& p)
{
  this->particles_parser_ = &p;
}

void input_particles_pskel::
parsers (::xml_schema::string_pskel& particle_file,
         ::xml_schema::string_pskel& cuboids_file,
         ::cuboid_cluster_pskel& cuboids,
         ::particle_cluster_pskel& particles)
{
  this->particle_file_parser_ = &particle_file;
  this->cuboids_file_parser_ = &cuboids_file;
  this->cuboids_parser_ = &cuboids;
  this->particles_parser_ = &particles;
}

input_particles_pskel::
input_particles_pskel ()
: particle_file_parser_ (0),
  cuboids_file_parser_ (0),
  cuboids_parser_ (0),
  particles_parser_ (0)
{
}

// molsimInput_pskel
//

void molsimInput_pskel::
name_output_parser (::xml_schema::string_pskel& p)
{
  this->name_output_parser_ = &p;
}

void molsimInput_pskel::
frequency_output_parser (::xml_schema::string_pskel& p)
{
  this->frequency_output_parser_ = &p;
}

void molsimInput_pskel::
delta_t_parser (::xml_schema::string_pskel& p)
{
  this->delta_t_parser_ = &p;
}

void molsimInput_pskel::
t_end_parser (::xml_schema::string_pskel& p)
{
  this->t_end_parser_ = &p;
}

void molsimInput_pskel::
particles_parser (::input_particles_pskel& p)
{
  this->particles_parser_ = &p;
}

void molsimInput_pskel::
parsers (::xml_schema::string_pskel& name_output,
         ::xml_schema::string_pskel& frequency_output,
         ::xml_schema::string_pskel& delta_t,
         ::xml_schema::string_pskel& t_end,
         ::input_particles_pskel& particles)
{
  this->name_output_parser_ = &name_output;
  this->frequency_output_parser_ = &frequency_output;
  this->delta_t_parser_ = &delta_t;
  this->t_end_parser_ = &t_end;
  this->particles_parser_ = &particles;
}

molsimInput_pskel::
molsimInput_pskel ()
: name_output_parser_ (0),
  frequency_output_parser_ (0),
  delta_t_parser_ (0),
  t_end_parser_ (0),
  particles_parser_ (0)
{
}

// double_vector_pskel
//

void double_vector_pskel::
x (const ::std::string&)
{
}

void double_vector_pskel::
y (const ::std::string&)
{
}

void double_vector_pskel::
z (const ::std::string&)
{
}

void double_vector_pskel::
post_double_vector ()
{
}

bool double_vector_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "x" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

    if (this->x_parser_)
      this->x_parser_->pre ();

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

    if (this->y_parser_)
      this->y_parser_->pre ();

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

    if (this->z_parser_)
      this->z_parser_->pre ();

    return true;
  }

  return false;
}

bool double_vector_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "x" && ns.empty ())
  {
    if (this->x_parser_)
      this->x (this->x_parser_->post_string ());

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    if (this->y_parser_)
      this->y (this->y_parser_->post_string ());

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    if (this->z_parser_)
      this->z (this->z_parser_->post_string ());

    return true;
  }

  return false;
}

// integer_vector_pskel
//

void integer_vector_pskel::
x (const ::std::string&)
{
}

void integer_vector_pskel::
y (const ::std::string&)
{
}

void integer_vector_pskel::
z (const ::std::string&)
{
}

void integer_vector_pskel::
post_integer_vector ()
{
}

bool integer_vector_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "x" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

    if (this->x_parser_)
      this->x_parser_->pre ();

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

    if (this->y_parser_)
      this->y_parser_->pre ();

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

    if (this->z_parser_)
      this->z_parser_->pre ();

    return true;
  }

  return false;
}

bool integer_vector_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "x" && ns.empty ())
  {
    if (this->x_parser_)
      this->x (this->x_parser_->post_string ());

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    if (this->y_parser_)
      this->y (this->y_parser_->post_string ());

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    if (this->z_parser_)
      this->z (this->z_parser_->post_string ());

    return true;
  }

  return false;
}

// cuboid_pskel
//

void cuboid_pskel::
coordinates ()
{
}

void cuboid_pskel::
particles_per_dimension ()
{
}

void cuboid_pskel::
distance_particles (const ::std::string&)
{
}

void cuboid_pskel::
mass (const ::std::string&)
{
}

void cuboid_pskel::
velocity ()
{
}

void cuboid_pskel::
post_cuboid ()
{
}

bool cuboid_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "coordinates" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->coordinates_parser_;

    if (this->coordinates_parser_)
      this->coordinates_parser_->pre ();

    return true;
  }

  if (n == "particles_per_dimension" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->particles_per_dimension_parser_;

    if (this->particles_per_dimension_parser_)
      this->particles_per_dimension_parser_->pre ();

    return true;
  }

  if (n == "distance_particles" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->distance_particles_parser_;

    if (this->distance_particles_parser_)
      this->distance_particles_parser_->pre ();

    return true;
  }

  if (n == "mass" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->mass_parser_;

    if (this->mass_parser_)
      this->mass_parser_->pre ();

    return true;
  }

  if (n == "velocity" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->velocity_parser_;

    if (this->velocity_parser_)
      this->velocity_parser_->pre ();

    return true;
  }

  return false;
}

bool cuboid_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "coordinates" && ns.empty ())
  {
    if (this->coordinates_parser_)
    {
      this->coordinates_parser_->post_double_vector ();
      this->coordinates ();
    }

    return true;
  }

  if (n == "particles_per_dimension" && ns.empty ())
  {
    if (this->particles_per_dimension_parser_)
    {
      this->particles_per_dimension_parser_->post_integer_vector ();
      this->particles_per_dimension ();
    }

    return true;
  }

  if (n == "distance_particles" && ns.empty ())
  {
    if (this->distance_particles_parser_)
      this->distance_particles (this->distance_particles_parser_->post_string ());

    return true;
  }

  if (n == "mass" && ns.empty ())
  {
    if (this->mass_parser_)
      this->mass (this->mass_parser_->post_string ());

    return true;
  }

  if (n == "velocity" && ns.empty ())
  {
    if (this->velocity_parser_)
    {
      this->velocity_parser_->post_double_vector ();
      this->velocity ();
    }

    return true;
  }

  return false;
}

// cuboid_cluster_pskel
//

void cuboid_cluster_pskel::
cuboid ()
{
}

void cuboid_cluster_pskel::
post_cuboid_cluster ()
{
}

bool cuboid_cluster_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "cuboid" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboid_parser_;

    if (this->cuboid_parser_)
      this->cuboid_parser_->pre ();

    return true;
  }

  return false;
}

bool cuboid_cluster_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "cuboid" && ns.empty ())
  {
    if (this->cuboid_parser_)
    {
      this->cuboid_parser_->post_cuboid ();
      this->cuboid ();
    }

    return true;
  }

  return false;
}

// particle_pskel
//

void particle_pskel::
coordinates ()
{
}

void particle_pskel::
velocity ()
{
}

void particle_pskel::
mass (const ::std::string&)
{
}

void particle_pskel::
post_particle ()
{
}

bool particle_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "coordinates" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->coordinates_parser_;

    if (this->coordinates_parser_)
      this->coordinates_parser_->pre ();

    return true;
  }

  if (n == "velocity" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->velocity_parser_;

    if (this->velocity_parser_)
      this->velocity_parser_->pre ();

    return true;
  }

  if (n == "mass" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->mass_parser_;

    if (this->mass_parser_)
      this->mass_parser_->pre ();

    return true;
  }

  return false;
}

bool particle_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "coordinates" && ns.empty ())
  {
    if (this->coordinates_parser_)
    {
      this->coordinates_parser_->post_double_vector ();
      this->coordinates ();
    }

    return true;
  }

  if (n == "velocity" && ns.empty ())
  {
    if (this->velocity_parser_)
    {
      this->velocity_parser_->post_double_vector ();
      this->velocity ();
    }

    return true;
  }

  if (n == "mass" && ns.empty ())
  {
    if (this->mass_parser_)
      this->mass (this->mass_parser_->post_string ());

    return true;
  }

  return false;
}

// particle_cluster_pskel
//

void particle_cluster_pskel::
particle ()
{
}

void particle_cluster_pskel::
post_particle_cluster ()
{
}

bool particle_cluster_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "particle" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->particle_parser_;

    if (this->particle_parser_)
      this->particle_parser_->pre ();

    return true;
  }

  return false;
}

bool particle_cluster_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "particle" && ns.empty ())
  {
    if (this->particle_parser_)
    {
      this->particle_parser_->post_particle ();
      this->particle ();
    }

    return true;
  }

  return false;
}

// input_particles_pskel
//

void input_particles_pskel::
particle_file (const ::std::string&)
{
}

void input_particles_pskel::
cuboids_file (const ::std::string&)
{
}

void input_particles_pskel::
cuboids ()
{
}

void input_particles_pskel::
particles ()
{
}

void input_particles_pskel::
post_input_particles ()
{
}

bool input_particles_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "particle_file" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->particle_file_parser_;

    if (this->particle_file_parser_)
      this->particle_file_parser_->pre ();

    return true;
  }

  if (n == "cuboids_file" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboids_file_parser_;

    if (this->cuboids_file_parser_)
      this->cuboids_file_parser_->pre ();

    return true;
  }

  if (n == "cuboids" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboids_parser_;

    if (this->cuboids_parser_)
      this->cuboids_parser_->pre ();

    return true;
  }

  if (n == "particles" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->particles_parser_;

    if (this->particles_parser_)
      this->particles_parser_->pre ();

    return true;
  }

  return false;
}

bool input_particles_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "particle_file" && ns.empty ())
  {
    if (this->particle_file_parser_)
      this->particle_file (this->particle_file_parser_->post_string ());

    return true;
  }

  if (n == "cuboids_file" && ns.empty ())
  {
    if (this->cuboids_file_parser_)
      this->cuboids_file (this->cuboids_file_parser_->post_string ());

    return true;
  }

  if (n == "cuboids" && ns.empty ())
  {
    if (this->cuboids_parser_)
    {
      this->cuboids_parser_->post_cuboid_cluster ();
      this->cuboids ();
    }

    return true;
  }

  if (n == "particles" && ns.empty ())
  {
    if (this->particles_parser_)
    {
      this->particles_parser_->post_particle_cluster ();
      this->particles ();
    }

    return true;
  }

  return false;
}

// molsimInput_pskel
//

void molsimInput_pskel::
name_output (const ::std::string&)
{
}

void molsimInput_pskel::
frequency_output (const ::std::string&)
{
}

void molsimInput_pskel::
delta_t (const ::std::string&)
{
}

void molsimInput_pskel::
t_end (const ::std::string&)
{
}

void molsimInput_pskel::
particles ()
{
}

void molsimInput_pskel::
post_molsimInput ()
{
}

bool molsimInput_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "name_output" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->name_output_parser_;

    if (this->name_output_parser_)
      this->name_output_parser_->pre ();

    return true;
  }

  if (n == "frequency_output" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->frequency_output_parser_;

    if (this->frequency_output_parser_)
      this->frequency_output_parser_->pre ();

    return true;
  }

  if (n == "delta_t" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->delta_t_parser_;

    if (this->delta_t_parser_)
      this->delta_t_parser_->pre ();

    return true;
  }

  if (n == "t_end" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->t_end_parser_;

    if (this->t_end_parser_)
      this->t_end_parser_->pre ();

    return true;
  }

  if (n == "particles" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->particles_parser_;

    if (this->particles_parser_)
      this->particles_parser_->pre ();

    return true;
  }

  return false;
}

bool molsimInput_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "name_output" && ns.empty ())
  {
    if (this->name_output_parser_)
      this->name_output (this->name_output_parser_->post_string ());

    return true;
  }

  if (n == "frequency_output" && ns.empty ())
  {
    if (this->frequency_output_parser_)
      this->frequency_output (this->frequency_output_parser_->post_string ());

    return true;
  }

  if (n == "delta_t" && ns.empty ())
  {
    if (this->delta_t_parser_)
      this->delta_t (this->delta_t_parser_->post_string ());

    return true;
  }

  if (n == "t_end" && ns.empty ())
  {
    if (this->t_end_parser_)
      this->t_end (this->t_end_parser_->post_string ());

    return true;
  }

  if (n == "particles" && ns.empty ())
  {
    if (this->particles_parser_)
    {
      this->particles_parser_->post_input_particles ();
      this->particles ();
    }

    return true;
  }

  return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

